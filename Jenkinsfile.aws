pipeline {
    agent any

    environment {
       CHECKOV_API_KEY = credentials('checkov-api-key')
    }

    stages {
        stage('Install') {
            stages {
                stage ('CLOC Installation'){
                    steps {
                        echo 'Checking if CLOC present'
                        sh '''
                           if [ -d "cloc" ]; then 
                               rm -rf cloc 
                           fi
                           '''
                        sh 'git clone https://github.com/AlDanial/cloc.git'
                    }
                }
                stage ('Checkov Installation'){
                    steps {
                        echo 'Installing Checkov'
                        sh 'pip3 install checkov'
                    }
                }
                stage ('PHPMetrics Installation'){
                    steps {
                        echo 'Installing PHPMetrics'
                        sh 'composer global require \'phpmetrics/phpmetrics:v0.0.6\''
                    }
                }
                stage ('Tartufo Installation'){
                    steps {
                        echo 'Installing Tartufo'
                        sh 'pip3 install tartufo'
                    }
                }
            }
        }
        stage('Execute') {
            stages {
                stage ('Execute CLOC scan'){
                    steps {
                        echo 'Executing CLOC'
                        sh 'cd cloc && ./cloc ../php'
                    }
                }
                stage ('Execute Checkov Scan'){
                    steps {
                        script {
                            docker.image('bridgecrew/checkov:latest').inside("--entrypoint=''") {
                                try {
                                    sh 'checkov -d .--bc-api-key $CHECKOV_API_KEY --use-enforcement-rules -o cli -o junitxml --output-file-path console,results.xml'
                                    junit skipPublishingChecks: true, testResults: 'results.xml'
                                } catch (err) {
                                    junit skipPublishingChecks: true, testResults: 'results.xml'
                                    throw err
                                }
                            }
                        }
                    }
                }
                stage ('Execute PHPMetrics Scan'){
                    steps {
                        echo 'Executing PHPMetrics'
                        sh 'phpmetrics ./php --report-html=bsides-report.html'
                    }
                }
                stage ('Executing Tartufo Scan'){
                    steps {
                        echo 'Executing Tartufo'
                        sh 'tartufo scan-folder ./php'
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying PHP App'
            }
        }
    }
}
